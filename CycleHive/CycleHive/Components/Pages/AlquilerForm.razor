@page "/alquileres/nuevo"
@page "/alquileres/editar/{Id:int}"
@rendermode InteractiveServer
@inject NavigationManager _navigator
@inject IRepositoryAlquileres _repositorio

<h2>@_mensaje Alquiler</h2>
<EditForm Model="_alquiler" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-3">
        <label for="cboCliente" class="col-sm-2 col-form-label">Cliente</label>
        <div class="col-sm-10">
            <InputSelect id="cboCliente" class="form-control" @bind-Value="_alquiler.ClienteId">
                <option value="">Seleccione un cliente</option>
                @if (_clientes != null)
                {
                    @foreach (Cliente cliente in _clientes)
                    {
                        <option value="@cliente.Id">@cliente.Nombre</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => _alquiler.ClienteId)" />
        </div>
    </div>

    <div class="row mb-3">
        <label for="cboBicicleta" class="col-sm-2 col-form-label">Bicicleta</label>
        <div class="col-sm-10">
            <InputSelect id="cboBicicleta" class="form-control" @bind-Value="_alquiler.BicicletaId" @onselect="ActualizarPrecioTotal">
                <option value="">Seleccione una bicicleta</option>
                @if (_bicicletas != null)
                {
                    @foreach (Bicicleta bicicleta in _bicicletas)
                    {
                        <option value="@bicicleta.Id">@bicicleta.Marca @bicicleta.Modelo</option>
                    }
                }
            </InputSelect>
            <ValidationMessage For="@(() => _alquiler.BicicletaId)" />
        </div>
    </div>

    <div class="row mb-3">
        <label for="dtpFechaInicio" class="col-sm-2 col-form-label">Fecha de inicio</label>
        <div class="col-sm-10">
            <InputDate id="dtpFechaInicio" class="form-control" @bind-Value="_alquiler.FechaInicio" min="@_minFecha" max="@_maxFecha" @onselect="ActualizarPrecioTotal" />
            <ValidationMessage For="@(() => _alquiler.FechaInicio)" />
        </div>
    </div>

    <div class="row mb-3">
        <label for="dtpFechaFin" class="col-sm-2 col-form-label">Fecha de fin</label>
        <div class="col-sm-10">
            <InputDate id="dtpFechaFin" class="form-control" @bind-Value="_alquiler.FechaFin" min="@_minFecha" max="@_maxFecha" @onselect="ActualizarPrecioTotal" />
            <ValidationMessage For="@(() => _alquiler.FechaFin)" />
        </div>
    </div>

    <div class="row mb-3">
        <label for="txtPrecioTotal" class="col-sm-2 col-form-label">Precio Total</label>
        <div class="col-sm-10">
            <input id="txtPrecioTotal" class="form-control" type="text" value="@PrecioTotal.ToString("C")" readonly />
        </div>
    </div>
    <input type="button" class="btn btn-secondary" @onclick="ActualizarPrecioTotal" value="Calcular costo total" />
    <button type="submit" class="btn btn-primary">Guardar</button>
    <button class="btn btn-danger" @onclick="Cancelar" @onclick:preventDefault>Cancelar</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    private string _mensaje = "";
    private Alquiler _alquiler = new Alquiler();
    private List<Bicicleta>? _bicicletas = new();
    private List<Cliente>? _clientes = new();
    private string _minFecha = DateTime.Now.ToString("yyyy-MM-dd");
    private string _maxFecha = DateTime.Now.AddDays(30).ToString("yyyy-MM-dd");
    private double PrecioTotal { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        _clientes = await _repositorio.GetClientes();
        _bicicletas = await _repositorio.GetBicicletas();

        if (Id > 0)
        {
            _mensaje = "Editar";
            _alquiler = await _repositorio.Get(Id);
        }
        else
        {
            _mensaje = "Nuevo";
        }
        ActualizarPrecioTotal();
    }

    private async Task Guardar()
    {
        if (_clientes != null)
        {
            _alquiler.Cliente = _clientes.FirstOrDefault(c => c.Id == _alquiler.ClienteId);
        }
        if (_bicicletas != null)
        {
            _alquiler.Bicicleta = _bicicletas.FirstOrDefault(b => b.Id == _alquiler.BicicletaId);
        }

        ActualizarPrecioTotal();
        _alquiler.PrecioTotal = (int)PrecioTotal;

        if (Id > 0)
        {
            await _repositorio.Update(Id, _alquiler);
        }
        else
        {
            await _repositorio.Add(_alquiler);
        }
        _navigator.NavigateTo("/alquileres");
    }

    private void Cancelar()
    {
        _navigator.NavigateTo("/alquileres");
    }

    private void ActualizarPrecioTotal()
    {
        if (_alquiler.FechaInicio != default && _alquiler.FechaFin != default && _alquiler.BicicletaId != 0)
        {
            var bicicleta = _bicicletas.FirstOrDefault(b => b.Id == _alquiler.BicicletaId);
            if (bicicleta != null)
            {
                int dias = (_alquiler.FechaFin - _alquiler.FechaInicio).Days + 1; // Incluye el día de inicio y fin
                PrecioTotal = dias * bicicleta.Precio;
            }
            else
            {
                PrecioTotal = 0;
            }
        }
        else
        {
            PrecioTotal = 0;
        }
    }
}